// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UniversityData;

namespace UniversityData.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20200518112907_EditColumnAuthUserStudent")]
    partial class EditColumnAuthUserStudent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("UniversityData.Models.AuthUserStudent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Salt")
                        .HasColumnName("salt")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id")
                        .HasName("auth_user_student_pkey");

                    b.ToTable("auth_user_student");
                });

            modelBuilder.Entity("UniversityData.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DirectorId")
                        .HasColumnName("director_id")
                        .HasColumnType("integer");

                    b.Property<int>("InstituteId")
                        .HasColumnName("institute_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Shortname")
                        .HasColumnName("shortname")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("DirectorId")
                        .IsUnique()
                        .HasName("department_director_id_key");

                    b.HasIndex("InstituteId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("department_name_key");

                    b.ToTable("department");
                });

            modelBuilder.Entity("UniversityData.Models.GroupStudentV", b =>
                {
                    b.Property<int?>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsHeadOfGroup")
                        .HasColumnName("is_head_of_group")
                        .HasColumnType("boolean");

                    b.Property<long?>("SerialNumber")
                        .HasColumnName("serial_number")
                        .HasColumnType("bigint");

                    b.Property<int?>("StudentId")
                        .HasColumnName("student_id")
                        .HasColumnType("integer");

                    b.Property<string>("StudentName")
                        .HasColumnName("student_name")
                        .HasColumnType("text");

                    b.ToTable("group_student_v");
                });

            modelBuilder.Entity("UniversityData.Models.GroupSubjectLink", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("semester_number")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.HasKey("GroupId", "SubjectId")
                        .HasName("gs_pk");

                    b.HasIndex("SubjectId");

                    b.ToTable("group_subject_link");
                });

            modelBuilder.Entity("UniversityData.Models.GroupSubjectV", b =>
                {
                    b.Property<int?>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("integer");

                    b.Property<int?>("Semester")
                        .HasColumnName("semester")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectName")
                        .HasColumnName("subject_name")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.ToTable("group_subject_v");
                });

            modelBuilder.Entity("UniversityData.Models.Institute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DirectorDeputyId")
                        .HasColumnName("director_deputy_id")
                        .HasColumnType("integer");

                    b.Property<int>("DirectorId")
                        .HasColumnName("director_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Shortname")
                        .HasColumnName("shortname")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("DirectorDeputyId")
                        .IsUnique()
                        .HasName("institute_director_deputy_id_key");

                    b.HasIndex("DirectorId")
                        .IsUnique()
                        .HasName("institute_director_id_key");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("institute_name_key");

                    b.ToTable("institute");
                });

            modelBuilder.Entity("UniversityData.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Patronymic")
                        .HasColumnName("patronymic")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("UniversityData.Models.StaffDepartmentLink", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("integer");

                    b.Property<int>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("integer");

                    b.HasKey("DepartmentId", "StaffId")
                        .HasName("sd_pk");

                    b.HasIndex("StaffId");

                    b.ToTable("staff_department_link");
                });

            modelBuilder.Entity("UniversityData.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Patronymic")
                        .HasColumnName("patronymic")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnName("student_number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("StudentNumber")
                        .IsUnique()
                        .HasName("student_student_number_key");

                    b.ToTable("student");
                });

            modelBuilder.Entity("UniversityData.Models.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("integer");

                    b.Property<int>("HeadId")
                        .HasColumnName("head_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HeadId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("student_group_name_key");

                    b.ToTable("student_group");
                });

            modelBuilder.Entity("UniversityData.Models.StudentRequisite", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnName("student_id")
                        .HasColumnType("integer");

                    b.Property<string>("EMail")
                        .HasColumnName("e_mail")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("integer");

                    b.Property<string>("HomePhoneNumber")
                        .HasColumnName("home_phone_number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnName("mobile_phone_number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoLink")
                        .HasColumnName("photo_link")
                        .HasColumnType("text");

                    b.HasKey("StudentId")
                        .HasName("student_requisite_pkey");

                    b.HasIndex("GroupId");

                    b.ToTable("student_requisite");
                });

            modelBuilder.Entity("UniversityData.Models.SubSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Shortname")
                        .HasColumnName("shortname")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int>("SubLecturerId")
                        .HasColumnName("sub_lecturer_id")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("sub_subject_name_key");

                    b.HasIndex("SubLecturerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("sub_subject");
                });

            modelBuilder.Entity("UniversityData.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("LecturerId")
                        .HasColumnName("lecturer_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Shortname")
                        .HasColumnName("shortname")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("subject_name_key");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("UniversityData.Models.AuthUserStudent", b =>
                {
                    b.HasOne("UniversityData.Models.Student", "Student")
                        .WithOne("AuthUserStudent")
                        .HasForeignKey("UniversityData.Models.AuthUserStudent", "Id")
                        .HasConstraintName("auth_user_student_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityData.Models.Department", b =>
                {
                    b.HasOne("UniversityData.Models.Staff", "Director")
                        .WithOne("Department")
                        .HasForeignKey("UniversityData.Models.Department", "DirectorId")
                        .HasConstraintName("department_director_id_fkey");

                    b.HasOne("UniversityData.Models.Institute", "Institute")
                        .WithMany("Department")
                        .HasForeignKey("InstituteId")
                        .HasConstraintName("department_institute_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityData.Models.GroupSubjectLink", b =>
                {
                    b.HasOne("UniversityData.Models.StudentGroup", "Group")
                        .WithMany("GroupSubjectLink")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("group_subject_link_group_id_fkey")
                        .IsRequired();

                    b.HasOne("UniversityData.Models.Subject", "Subject")
                        .WithMany("GroupSubjectLink")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("group_subject_link_subject_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityData.Models.Institute", b =>
                {
                    b.HasOne("UniversityData.Models.Staff", "DirectorDeputy")
                        .WithOne("InstituteDirectorDeputy")
                        .HasForeignKey("UniversityData.Models.Institute", "DirectorDeputyId")
                        .HasConstraintName("institute_director_deputy_id_fkey")
                        .IsRequired();

                    b.HasOne("UniversityData.Models.Staff", "Director")
                        .WithOne("InstituteDirector")
                        .HasForeignKey("UniversityData.Models.Institute", "DirectorId")
                        .HasConstraintName("institute_director_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityData.Models.StaffDepartmentLink", b =>
                {
                    b.HasOne("UniversityData.Models.Department", "Department")
                        .WithMany("StaffDepartmentLink")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("staff_department_link_department_id_fkey")
                        .IsRequired();

                    b.HasOne("UniversityData.Models.Staff", "Staff")
                        .WithMany("StaffDepartmentLink")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("staff_department_link_staff_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityData.Models.StudentGroup", b =>
                {
                    b.HasOne("UniversityData.Models.Department", "Department")
                        .WithMany("StudentGroup")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("student_group_department_id_fkey")
                        .IsRequired();

                    b.HasOne("UniversityData.Models.Student", "Head")
                        .WithMany("StudentGroup")
                        .HasForeignKey("HeadId")
                        .HasConstraintName("student_group_head_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityData.Models.StudentRequisite", b =>
                {
                    b.HasOne("UniversityData.Models.StudentGroup", "Group")
                        .WithMany("StudentRequisite")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("student_requisite_group_id_fkey")
                        .IsRequired();

                    b.HasOne("UniversityData.Models.Student", "Student")
                        .WithOne("StudentRequisite")
                        .HasForeignKey("UniversityData.Models.StudentRequisite", "StudentId")
                        .HasConstraintName("student_requisite_student_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityData.Models.SubSubject", b =>
                {
                    b.HasOne("UniversityData.Models.Staff", "SubLecturer")
                        .WithMany("SubSubject")
                        .HasForeignKey("SubLecturerId")
                        .HasConstraintName("sub_subject_sub_lecturer_id_fkey")
                        .IsRequired();

                    b.HasOne("UniversityData.Models.Subject", "Subject")
                        .WithMany("SubSubject")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("sub_subject_subject_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityData.Models.Subject", b =>
                {
                    b.HasOne("UniversityData.Models.Staff", "Lecturer")
                        .WithMany("Subject")
                        .HasForeignKey("LecturerId")
                        .HasConstraintName("subject_lecturer_id_fkey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
